{
  "title": "System Monitoring Dashboard",
  "content": "<div># System Monitoring Dashboard</div><div><br></div><div>**System Monitoring Dashboard** is a Flask-based web application that displays real-time system metrics, CPU, memory, and disk usage and stores the latest five metrics in Redis. Itâ€™s designed to be easily deployed locally or via Docker, and it integrates with several advanced Docker productivity tools.</div><div><br></div><div>## Features</div><div><br></div><div>- **Real-time Metrics:** Monitor CPU, memory, and disk usage.</div><div>- **Data Persistence:** Save the latest five metrics in Redis.</div><div>- **Live Dashboard:** Automatically update the dashboard every 5 seconds.</div><div>- **Containerized Deployment:** Easily deploy using Docker and Docker Compose.</div><div><br></div><div>## Getting Started</div><div><br></div><div>### Prerequisites</div><div><br></div><div>- **Local Development:**</div><div>&nbsp; - Python 3.9 or higher</div><div>&nbsp; - Redis installed and running locally ([Installation instructions](https://redis.io/download))</div><div>- **Containerized Deployment:**</div><div>&nbsp; - [Docker](https://www.docker.com/get-started)</div><div>&nbsp; - [Docker Compose](https://docs.docker.com/compose/install/)</div><div><br></div><div>## Running Locally</div><div><br></div><div>1. **Clone the repository:**</div><div><br></div><div>&nbsp; &nbsp;```bash</div><div>&nbsp; &nbsp;git clone https://github.com/chintanboghara/system-monitoring-dashboard.git</div><div>&nbsp; &nbsp;cd system-monitoring-dashboard</div><div>&nbsp; &nbsp;```</div><div><br></div><div>2. **Set up a virtual environment (optional but recommended):**</div><div><br></div><div>&nbsp; &nbsp;```bash</div><div>&nbsp; &nbsp;python3 -m venv venv</div><div>&nbsp; &nbsp;source venv/bin/activate&nbsp; &nbsp;# On Windows use: venv\\Scripts\\activate</div><div>&nbsp; &nbsp;```</div><div><br></div><div>3. **Install the dependencies:**</div><div><br></div><div>&nbsp; &nbsp;```bash</div><div>&nbsp; &nbsp;pip install -r requirements.txt</div><div>&nbsp; &nbsp;```</div><div><br></div><div>4. **Ensure Redis is running locally.**</div><div><br></div><div>5. **Run the Flask application:**</div><div><br></div><div>&nbsp; &nbsp;```bash</div><div>&nbsp; &nbsp;flask run --host=0.0.0.0 --port=5001</div><div>&nbsp; &nbsp;```</div><div>&nbsp; &nbsp;Alternatively:</div><div>&nbsp; &nbsp;```bash</div><div>&nbsp; &nbsp;python app.py</div><div>&nbsp; &nbsp;```</div><div><br></div><div>6. **Access the application:**</div><div><br></div><div>&nbsp; &nbsp;Open your browser and navigate to [http://localhost:5001](http://localhost:5001).</div><div><br></div><div>## Running Using Docker</div><div><br></div><div>### Using Dockerfile</div><div><br></div><div>1. **Build the Docker image:**</div><div><br></div><div>&nbsp; &nbsp;```bash</div><div>&nbsp; &nbsp;docker build -t system-monitoring-dashboard .</div><div>&nbsp; &nbsp;```</div><div><br></div><div>2. **Run the Docker container:**</div><div><br></div><div>&nbsp; &nbsp;```bash</div><div>&nbsp; &nbsp;docker run -p 5001:5001 system-monitoring-dashboard</div><div>&nbsp; &nbsp;```</div><div><br></div><div>3. **Access the application:**</div><div><br></div><div>&nbsp; &nbsp;Open your browser and navigate to [http://localhost:5001](http://localhost:5001).</div><div><br></div><div>### Using Docker Compose</div><div><br></div><div>1. **Ensure Docker Compose is installed.**</div><div><br></div><div>2. **Start the services:**</div><div><br></div><div>&nbsp; &nbsp;```bash</div><div>&nbsp; &nbsp;docker-compose up</div><div>&nbsp; &nbsp;```</div><div><br></div><div>&nbsp; &nbsp;This command builds and starts both the Flask web service and the Redis service.</div><div><br></div><div>3. **Access the application:**</div><div><br></div><div>&nbsp; &nbsp;Open your browser and navigate to [http://localhost:5001](http://localhost:5001).</div><div><br></div><div>## Advanced Docker Productivity Tools</div><div><br></div><div>### Docker Desktop</div><div><br></div><div>- **Overview:**&nbsp;&nbsp;</div><div>&nbsp; Docker Desktop provides a GUI for managing containers, images, and networks. It is highly useful for monitoring container status, logs, and performance metrics.</div><div>- **Steps:**&nbsp;&nbsp;</div><div>&nbsp; - Install [Docker Desktop](https://www.docker.com/products/docker-desktop/) on your machine.</div><div>&nbsp; - Launch Docker Desktop to manage your containers and view real-time logs of your running services.</div><div><br></div><div>### Docker Build Cloud</div><div><br></div><div>- **Overview:**&nbsp;&nbsp;</div><div>&nbsp; Use Docker Build Cloud (via Buildx) to speed up your build process with advanced caching and parallel builds.</div><div>- **Steps:**&nbsp;&nbsp;</div><div>&nbsp; ```bash</div><div>&nbsp; docker buildx version</div><div>&nbsp; docker buildx create --name mybuilder --use</div><div>&nbsp; docker buildx bake --progress=plain</div><div>&nbsp; ```</div><div>&nbsp; This set of commands helps you create a new builder instance and optimize your build process.</div><div><br></div><div>### Docker Scout</div><div><br></div><div>- **Overview:**&nbsp;&nbsp;</div><div>&nbsp; Docker Scout helps you scan your Docker images for security vulnerabilities and outdated dependencies.</div><div>- **Steps:**&nbsp;&nbsp;</div><div>&nbsp; ```bash</div><div>&nbsp; docker scout quickview system-monitoring-dashboard</div><div>&nbsp; docker scout cves system-monitoring-dashboard</div><div>&nbsp; ```</div><div>&nbsp; These commands provide a quick security overview and list of known vulnerabilities for your image.</div><div><br></div><div>### Docker Hub</div><div><br></div><div>- **Overview:**&nbsp;&nbsp;</div><div>&nbsp; Docker Hub is a central repository for sharing your Docker images.</div><div>- **Steps to Push Your Image:**</div><div>&nbsp; 1. **Log in to Docker Hub:**</div><div>&nbsp; &nbsp; &nbsp;```bash</div><div>&nbsp; &nbsp; &nbsp;docker login --username YOUR_DOCKERHUB_USERNAME</div><div>&nbsp; &nbsp; &nbsp;```</div><div>&nbsp; 2. **Build your image (if not already built):**</div><div>&nbsp; &nbsp; &nbsp;```bash</div><div>&nbsp; &nbsp; &nbsp;docker build -t YOUR_DOCKERHUB_USERNAME/system-monitoring-dashboard .</div><div>&nbsp; &nbsp; &nbsp;```</div><div>&nbsp; 3. **Push the image to Docker Hub:**</div><div>&nbsp; &nbsp; &nbsp;```bash</div><div>&nbsp; &nbsp; &nbsp;docker push YOUR_DOCKERHUB_USERNAME/system-monitoring-dashboard:latest</div><div>&nbsp; &nbsp; &nbsp;```</div><div><br></div><div>### Test with Testcontainers Cloud</div><div><br></div><div>- **Overview:**&nbsp;&nbsp;</div><div>&nbsp; Testcontainers Cloud allows you to run integration tests in isolated container environments. It is ideal for ensuring your application works as expected when interfacing with external services like Redis.</div><div>- **Steps:**</div><div>&nbsp; - **Install Dependencies:**</div><div>&nbsp; &nbsp; ```bash</div><div>&nbsp; &nbsp; pip install pytest testcontainers</div><div>&nbsp; &nbsp; ```</div><div>&nbsp; - **Example Test File:**&nbsp;&nbsp;</div><div>&nbsp; &nbsp; Create a file named `test_app.py` with the following content:</div><div>&nbsp; &nbsp; ```python</div><div>&nbsp; &nbsp; import pytest</div><div>&nbsp; &nbsp; import redis</div><div>&nbsp; &nbsp; import os</div><div>&nbsp; &nbsp; from testcontainers.redis import RedisContainer</div><div>&nbsp; &nbsp; from app import app</div><div><br></div><div>&nbsp; &nbsp; @pytest.fixture(scope=\"module\")</div><div>&nbsp; &nbsp; def redis_container():</div><div>&nbsp; &nbsp; &nbsp; &nbsp; with RedisContainer() as redis_container:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; redis_host = redis_container.get_container_host_ip()</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; redis_port = redis_container.get_exposed_port(6379)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; os.environ[\"REDIS_HOST\"] = redis_host</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; os.environ[\"REDIS_PORT\"] = str(redis_port)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yield redis_host, redis_port</div><div><br></div><div>&nbsp; &nbsp; @pytest.fixture</div><div>&nbsp; &nbsp; def client():</div><div>&nbsp; &nbsp; &nbsp; &nbsp; app.config[\"TESTING\"] = True</div><div>&nbsp; &nbsp; &nbsp; &nbsp; with app.test_client() as client:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yield client</div><div><br></div><div>&nbsp; &nbsp; def test_redis_connection(redis_container):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; redis_host, redis_port = redis_container</div><div>&nbsp; &nbsp; &nbsp; &nbsp; r = redis.Redis(host=redis_host, port=int(redis_port), decode_responses=True)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; r.set(\"test_key\", \"Hello, Redis!\")</div><div>&nbsp; &nbsp; &nbsp; &nbsp; assert r.get(\"test_key\") == \"Hello, Redis!\"</div><div><br></div><div>&nbsp; &nbsp; def test_metrics_endpoint(client):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; response = client.get(\"/metrics\")</div><div>&nbsp; &nbsp; &nbsp; &nbsp; assert response.status_code == 200</div><div>&nbsp; &nbsp; &nbsp; &nbsp; data = response.get_json()</div><div>&nbsp; &nbsp; &nbsp; &nbsp; assert \"cpu\" in data</div><div>&nbsp; &nbsp; &nbsp; &nbsp; assert \"memory\" in data</div><div>&nbsp; &nbsp; &nbsp; &nbsp; assert \"disk\" in data</div><div>&nbsp; &nbsp; ```</div><div>&nbsp; - **Run the Tests:**</div><div>&nbsp; &nbsp; ```bash</div><div>&nbsp; &nbsp; python3 -m pytest test_app.py</div><div>&nbsp; &nbsp; ```</div><div><br></div><div>## Summary of Key Commands</div><div><br></div><div>| Feature&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| Command&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|</div><div>|---------------------|-----------------------------------------------------|</div><div>| **Build Image**&nbsp; &nbsp; &nbsp;| `docker build -t system-monitoring-dashboard .`&nbsp; &nbsp; &nbsp;|</div><div>| **Run Container**&nbsp; &nbsp;| `docker run -p 5001:5001 system-monitoring-dashboard` |</div><div>| **Start Services**&nbsp; | `docker-compose up`&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|</div><div>| **Stop Services**&nbsp; &nbsp;| `docker-compose down`&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|</div><div>| **Live Reload**&nbsp; &nbsp; &nbsp;| `docker-compose watch`&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |</div><div>| **Security Scan**&nbsp; &nbsp;| `docker scout quickview system-monitoring-dashboard`|</div><div>| **Faster Build**&nbsp; &nbsp; | `docker buildx bake --progress=plain`&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|</div><div>| **Push to Docker Hub** | See steps under **Docker Hub**&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |</div><div>| **Run Tests**&nbsp; &nbsp; &nbsp; &nbsp;| `pytest test_app.py`&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |</div>"
}